#!/bin/bash

if test -z "$EXAMPLE_DIR" # ie. /home/user/adamant_example
then
  # Set the adamant directory based on the location of this file.
  export EXAMPLE_DIR=`readlink -f "${BASH_SOURCE[0]}" | xargs dirname | xargs dirname`
fi

if test -z "$ADAMANT_DIR" # ie. /home/user/adamant
then
  # Set the adamant directory based on the location of the example dir.
  export ADAMANT_DIR=`readlink -f "$EXAMPLE_DIR/../adamant"`
fi

# Only set the environment once:
if test -n "$EXAMPLE_ENVIRONMENT_SET"
then
  return
fi

# This script sets up the environment for the example project.
echo "Setting up Adamant Example environment."

# Set the path to our Adamant configuration file for example:
export ADAMANT_CONFIGURATION_YAML=$EXAMPLE_DIR/config/example.configuration.yaml

# Activate the Adamant environment:
. $ADAMANT_DIR/env/activate $EXAMPLE_DIR

# Temporary fix for https://github.com/alire-project/GNAT-FSF-builds/issues/69. This can
# go away when a new release of gnat_arm_elf fixes this issue >14.1.3,
# see: https://alire.ada.dev/crates/gnat_arm_elf
arm_elf_dir=`which arm-eabi-gcc | xargs dirname | xargs dirname`
pico_runtime_dir="$arm_elf_dir/arm-eabi/lib/gnat/embedded-rpi-pico"
pico_runtime_gnarl_dir="$pico_runtime_dir/gnarl_user"
mirror="https://raw.githubusercontent.com/gcc-mirror/gcc/releases/gcc-14/gcc/ada/libgnarl"
installed=0
if [[ ! -f "$pico_runtime_gnarl_dir/s-putaim.adb" ]]
then
  wget -P $pico_runtime_gnarl_dir $mirror/s-putaim.adb
  installed=1
fi
if [[ ! -f "$pico_runtime_gnarl_dir/s-putaim.ads" ]]
then
  wget -P $pico_runtime_gnarl_dir $mirror/s-putaim.ads
  installed=1
fi
if [[ $installed -eq 1 ]]
then
  gprbuild -P $pico_runtime_dir/ravenscar_build.gpr
fi

# For EMA we use the 16-bit subseconds Sys_Time inside of Adamant instead
# of the 32-bit subseconds default.
export REMOVE_BUILD_PATH=$ADAMANT_DIR/src/types/sys_time
export EXTRA_BUILD_PATH=$ADAMANT_DIR/src/types/sys_time/subseconds_16

# Signify the environment it set up:
export EXAMPLE_ENVIRONMENT_SET="yes"

echo "Done."
